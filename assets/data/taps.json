[
  {
    "type": "Flutter",
    "name": "Flutter的优缺点",
    "answer": "优点：1、高性能，2、高保真，3、相对易学，4、热重载；\n缺点：1、不支持热更新，2、生态需完善；",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "context  和 state  和widgets之间的关系",
    "answer": "Widget 和 Context 的关系：\n\n每个 Widget 都有一个与之关联的 BuildContext\nBuildContext 实际上是 Element 的抽象，代表了 Widget 在 widget 树中的位置\nContext 允许 Widget 访问其祖先 Widget 的信息和框架提供的服务，Widget 和 State 的关系：\n\nStatefulWidget 与 State 对象配对使用\nState 对象保存了 StatefulWidget 的可变状态\n当 StatefulWidget 被重建时，其对应的 State 对象会被保留State 和 Context 的关系：\n\nState 对象持有一个 BuildContext，通过 this.context 访问\n这个 Context 代表了 StatefulWidget 在树中的位置\nState 可以通过这个 Context 访问其他 Widget 和服务，三者之间的交互：\n\nWidget 定义 UI 结构\nState 管理可变状态\nContext 提供访问其他 Widget 和服务的能力，生命周期关联：\n\nWidget 的重建不会影响 State 的生命周期\nContext 的生命周期与 Element 树中的位置相关数据流：\n\n数据通常从父 Widget 通过构造函数传递给子 Widget\nState 可以持有和修改数据\nContext 可以用来访问 InheritedWidget 中的数据\n\n\n重建机制：\n\n当 State 调用 setState() 时，会触发关联 Widget 的重建\n重建时会创建新的 Widget 实例，但 State 和 Context 保持不变，应式编程：\nWidget 树的结构可以根据 State 和 Context 中的数据动态变化",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "Flutter跨平台原理",
    "answer": "自写UI渲染引擎实现跨平台",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "无需上下文进行路由跳转原理是怎么样的",
    "answer": "使用GlobalKey调用到NavigatorState的方法",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "为何本地资源图片刚进入的时候切换到另一张出现白屏",
    "answer": "原因：切换之后才开始解析本地资源图片；\n解决方案：在初始化的时候就加载指定asset图片，而不是在需要展示的时候才开始加载",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "setState做了哪些工作？是如何更新UI的？",
    "answer": "setState 其实是调用了 markNeedsBuild ，该方法内部标记此Element 为 Dirty ，然后在下一帧 WidgetsBinding.drawFrame 才会被绘制， setState 并不是立即生效的。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "Flutter应用启动runApp(MyApp)过程是怎么样的？",
    "answer": "Flutter 中 runApp 启动入口其实是一个 WidgetsFlutterBinding ，它主要是通过 BindingBase 的子类 GestureBinding  、ServicesBinding  、 SchedulerBinding  、PaintingBinding  、SemanticsBinding  、 RendererBinding  、WidgetsBinding 等，通过 mixins 的组合而成的。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "Dart虚拟机如何管理的？怎么调用？如何跟Flutter引擎交互？",
    "answer": "Dart虚拟机拥有自己的Isolate，完全由虚拟机自己管理的，Flutter引擎也无法直接访问。Dart的UI相关操作，是由Root Isolate通过Dart的C++调用，或者是发送消息通知的方式，将UI渲染相关的任务提交到UIRunner执行，这样就可以跟Flutter引擎相关模块进行交互。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "线程和isolate的关系是什么？",
    "answer": "1、同一个线程在同一时间只能进入一个isolate，当需要进入另一个isolate则必须先退出当前的isolate；\n2、一次只能有一个Mutator线程关联对应的isolate，Mutator线程是执行Dart代码并使用虚拟机的公共的C语言API的线程；",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "介绍下JIT运行模式中kernel service",
    "answer": "是一个辅助类isolate，其核心工作就是CFE，将dart转为Kernel二进制，然后VM可直接使用Kernel二进制运行在主isolate里面运行。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "介绍下Dart虚拟机中通过Snapshots运行",
    "answer": "Snapshot概念：\nSnapshot是Dart程序运行状态的一个快照，包含了预编译的代码和对象。\nSnapshot类型：\nScript snapshot: 包含解析后的源代码\nApp-JIT snapshot: 包含即时编译的代码\nApp-AOT snapshot: 包含预先编译的机器码\n运行过程：\n加载Snapshot文件\n恢复虚拟机状态\n直接执行预编译的代码，跳过解析和编译步骤\n优势：\n加快启动速度\n减少运行时内存占用\n提高初始执行性能\n应用场景：\nFlutter应用发布",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "图片加载流程是怎么样的？",
    "answer": "从不同来源获取图片（本地资源、文件系统、网络等，将原始图片数据解码成像素数据\n这个过程通常在后台线程进行，避免阻塞UI，解码后的图片会被缓存在内存中\n使用 ImageCache 管理缓存，将解码后的图片数据传递给渲染引擎\n使用 Skia 图形库进行实际绘制",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "简单的说下GestureDetector底层实现",
    "answer": "Flutter 使用 HitTestResult 来确定触摸事件发生在哪个 widget 上\n原始触摸事件由底层平台（如 Android 或 iOS）传递给 Flutter 引擎，多个 GestureDetector 可能会对同一个触摸事件感兴趣\nFlutter 使用手势竞争机制来决定哪个手势获胜，GestureDetector 内部使用多个 GestureRecognizer 子类来识别具体的手势\n例如 TapGestureRecognizer、DragGestureRecognizer 等，每个手势识别器维护自己的状态（如 possible、accepted、rejected）\n状态变化会触发相应的回调，GestureDetector 将识别到的手势转换为高级事件（如 onTap、onPanUpdate）\n这些事件被传递给用户定义的回调函数，GestureDetector 支持多点触控，如缩放和旋转手势\n使用 ScaleGestureRecognizer 处理这类复杂手势，当多个手势发生冲突时，Flutter 使用一套优先级系统来解决\n例如，垂直滚动可能会优先于水平滚动，开发者可以通过继承 GestureRecognizer 来创建自定义手势，GestureDetector 通过 RenderPointerListener 将自身添加到渲染树中\n这允许它接收到原始的指针事件",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "setState在哪种场景下可能会失效？",
    "answer": "1、刷新方法内声明的变量；\n2、刷新被final修饰的变量；",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "isolate是怎么进行通信的？实例化过程是怎么样的？",
    "answer": "isolate线程之间的通信主要通过port来进行，这个port消息传递过程是异步的。\n实例化一个isolate的过程包括：\n\n1.实例化isolate结构体。\n2.在堆中分配线程内存。\n3.配置port等过程。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "虚拟机如何运行Dart代码？",
    "answer": "1.源码或者Kernel二进制(JIT)\n2.snapshot ：\n\nAOT snapshot\nAppJIT snapshot",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "JIT运行模式中debug运行原理是怎么样的？",
    "answer": "将dart代码转换为kernel二进制和执行kernel二进制，这两个过程也可以分离开来，在两个不同的机器执行，比如host机器执行编译，移动设备执行kernel文件。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "默认情况下debug和release会生成哪些架构的so库？",
    "answer": "这个编译过程并不是flutter tools自身完成，而是交给另一个进程frontend_server来执行，它包括CFE和一些flutter专有的kernel转换器。\nhot reload：热重载机制正是依赖这一点，frontend_server重用上一次编译中的CFE状态，只重新编译实际更改的部分。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "..级联操作符",
    "answer": "级联操作符 可以返回对象从而继续执行其他方法：",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "Flutter 手势事件主要是通过竞技判断",
    "answer": "主要有 hitTest 把所有需要处理的控件对应的 RenderObject ， 从 child 到 parent 全部组合成列表，从最里面一直添加到最外层。\n\n然后从队列头的 child 开始 for 循环执行 handleEvent 方法，执行 handleEvent 的过程不会被拦截打断。\n\n一般情况下 Down 事件不会决出胜利者，大部分时候是在 MOVE 或者 UP 的时候才会决出胜利者。\n\n竞技场关闭时只有一个的就直接胜出响应，没有胜利者就拿排在队列第一个强制胜利响应。\n\n同时还有 didExceedDeadline 处理按住时的 Down 事件额外处理，同时手势处理一般在 GestureRecognizer 的子类进行",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "插件开发",
    "answer": "android获取context和activity\n\n可以在插件的Plugin类实现个ActivityAware，然后在onAttachedToActivity和onReattachedToActivityForConfigChanges都可以拿到ActivityPluginBinding的binding，binding调用getActivity就是了。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "flutter run实际走了哪三个命令？分别用于什么操作？",
    "answer": "flutter build apk：通过gradle来构建APK\nadb install：安装APK\nadb am start：启动应用",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "使用成熟状态管理库的弊端有哪些？",
    "answer": "增加代码复杂性、框架bug修复需要时间等待、不理解框架原理导致使用方式不对，反而带来更多问题、选型错误导致不符合应用要求、与团队风格冲突不适用",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "状态管理的使用原则是怎么样的？",
    "answer": "局部管理优于全局、保持数据安全性、考虑页面重新build带来的影响；",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "状态管理的底层逻辑一般是怎么样的？",
    "answer": "State：如StatefulWidget、StreamBuilder状态管理方式；\nInheritedWidget专门负责Widget树中数据共享的功能型Widget：如Provider、scoped_model就是基于它开发；\nNotification：与InheritedWidget正好相反，InheritedWidget是从上往下传递数据，Notification是从下往上，但两者都在自己的Widget树中传递，无法跨越树传递；\nStream 数据流 ：如Bloc、flutter_redux、fish_redux等也都基于它来做实现；",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "为什么需要状态管理？",
    "answer": "用于解决状态更新问题，不需要WidgetState 被全局化，保证组件隐私，使得代码可扩展，易维护，可以动态替换UI而不影响算法逻辑，安全可靠，保持数据的稳定伸缩，性能佳，局部优化；局部管理：短暂的状态，这种状态根本不需要做全局处理；\n全局管理：即应用状态，非短暂状态，您要在应用程序的许多部分之间共享，以及希望在用户会话之间保持的状态，就是我们所说的应用程序状态（有时也称为共享状态）",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "RenderObject如何使得页面重绘？流程是怎么样的？",
    "answer": "RenderObject 在 attch/layout 之后会通过 markNeedsPaint(); 使得页面重绘，",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "RenderObject布局相关方法调用顺序是怎么样的？",
    "answer": "layout -> performResize -> performLayout -> markNeedsPaint , 但是用户一般不会直接调用 layout，而是通过 markNeedsLayout ",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "Flutter 的 Debug 和 release 分别是在什么模式下运行的？",
    "answer": "Flutter 的 Debug 下是 JIT 模式，release下是AOT模式。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "PlatformView的作用有哪些？",
    "answer": "Flutter 中通过 PlatformView 可以嵌套原生 View 到 Flutter UI 中,使用了类似副屏显示的技术，VirtualDisplay 类代表一个虚拟显示器，调用 DisplayManager 的 createVirtualDisplay() 方法，将虚拟显示器的内容渲染在一个 Surface 控件上，然后将 Surface 的 id 通知给 Dart，让 engine 绘制时，在内存中找到对应的 Surface 画面内存数据，然后绘制出来。 实时控件截图渲染显示技术。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "线程和isolate的关系是什么？",
    "answer": "1、同一个线程在同一时间只能进入一个isolate，当需要进入另一个isolate则必须先退出当前的isolate；\n2、一次只能有一个Mutator线程关联对应的isolate，Mutator线程是执行Dart代码并使用虚拟机的公共的C语言API的线程；",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "PlatformView使用了哪些东西来实现？",
    "answer": "Presentation、VirtualDisplay 、 Surface 等；",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "说下Widget 和 element 和 RenderObject 之间的关系",
    "answer": "Widget会被inflate（填充）到Element，并由Element管理底层渲染树。Widget并不会直接管理状态及渲染,而是通过State这个对象来管理状态。Flutter创建Element的可见树，相对于Widget来说，是可变的，通常界面开发中，我们不用直接操作Element,而是由框架层实现内部逻辑。就如一个UI视图树中，可能包含有多个TextWidget(Widget被使用多次)，但是放在内部视图树的视角，这些TextWidget都是填充到一个个独立的Element中。Element会持有renderObject和widget的实例。记住，Widget 只是一个配置，RenderObject 负责管理布局、绘制等操作。\n\n在第一次创建 Widget 的时候，会对应创建一个 Element， 然后将该元素插入树中。如果之后 Widget 发生了变化，则将其与旧的 Widget 进行比较，并且相应地更新 Element。重要的是，Element 不会被重建，只是更新而已。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "Flutter 中存在哪四大线程？",
    "answer": "Flutter 中存在四大线程，分别为 UI Runner、GPU Runner、IO Runner， Platform Runner （原生主线程） ，同时在 Flutter 中可以通过 isolate 或者 compute 执行真正的跨线程异步操作。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "如何统一管理错误页面？",
    "answer": "在main方法修改ErrorWidget.builder 来自定义一个属于自己的Widget；",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "Flutter绘制流程是怎么样的？",
    "answer": "Flutter只关心向 GPU提供视图数据，GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "Flutter是怎么完成组件渲染的?",
    "answer": "在计算机系统中，图像的显示需要CPU、GPU和显示器一起配合完成CPU负责图像数据计算，GPU负责图像数据渲染，而显示器则负责最终图像显示。CPU把计算好的、需要显示的内容交给GPU，由GPU完成渲染后放入帧缓冲区，随后视频控制器根据垂直同步信号以每秒60次的速度，从帧缓冲区读取帧数据交由显示器完成图像显示。操作系统在呈现图像时遵循了这种机制。\n\n而Flutter作为跨平台开发框架也采用了这种底层方案，UI线程使用Dart语言来构建视图结构数据，这些数据会在GPU线程进行图层合成，随后交给图像渲染引擎Skia加工成GPU数据，而这些数据会通过OpenGL最终提供给GPU渲染。可以看到Flutter用了计算机最基本的图像渲染技术，摒弃其他一些通道和过程，用最直接的方式完成了图形显示，自然性能也就得到了保障。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "Flutter动画类型有哪些？",
    "answer": "补间动画：给定初值与终值，系统自动补齐中间帧的动画\n物理动画：遵循物理学定律的动画，实现了弹簧、阻尼、重力三种物理效果\n\n在应用使用过程中常见动画模式：\n\n动画列表或者网格：例如元素的添加或者删除操作；\n转场动画Shared element transition：例如从当前页面打开另一页面的过渡动画；\n交错动画Staggered animations：比如部分或者完全交错的动画。\n",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "什么是Navigator? MaterialApp做了什么？",
    "answer": "Navigator是在Flutter中负责管理维护页面堆栈的导航器。\nMaterialApp在需要的时候，会自动为我们创建Navigator。\nNavigator.of(context)，会使用context来向上遍历Element树，找到MaterialApp提供的_NavigatorState再调用其push/pop方法完成导航操作。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "Widget 唯一标识Key有哪几种？",
    "answer": "在flutter中，每个widget都是被唯一标识的。这个唯一标识在build或rendering阶段由框架定义。该标识对应于可选的Key参数，如果省略，Flutter将会自动生成一个。\n在flutter中，主要有4种类型的Key：GlobalKey（确保生成的Key在整个应用中唯一，是很昂贵的，允许element在树周围移动或变更父节点而不会丢失状态）、LocalKey、UniqueKey、ObjectKey。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "说下 Flutter 和其他跨平台方案的本质区别",
    "answer": "React Native 之类的框架，只是通过 JavaScript 虚拟机扩展调用系统组件，由 Android 和 iOS 系统进行组件的渲染；\nFlutter 则是自己完成了组件渲染的闭环。在计算机系统中，图像的显示需要 CPU、GPU 和显示器一起配合完成：CPU 负责图像数据计算，GPU 负责图像数据渲染，而显示器则负责最终图像显示。CPU 把计算好的、需要显示的内容交给 GPU，由 GPU 完成渲染后放入帧缓冲区，随后视频控制器根据垂直同步信号（VSync）以每秒 60 次的速度，从帧缓冲区读取帧数据交由显示器完成图像显示。操作系统在呈现图像时遵循了这种机制，而 Flutter 作为跨平台开发框架也采用了这种底层方案。下面有一张更为详尽的示意图来解释 Flutter 的绘制原理。Flutter 关注如何尽可能快地在两个硬件时钟的 VSync 信号之间计算并合成视图数据，然后通过 Skia 交给 GPU 渲染：UI 线程使用 Dart 来构建视图结构数据，这些数据会在 GPU 线程进行图层合成，随后交给 Skia 引擎加工成 GPU 数据，而这些数据会通过 OpenGL 最终提供给 GPU 渲染。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "简述下Flutter 的热重载",
    "answer": "lutter 的热重载是基于 JIT 编译模式的代码增量同步。由于 JIT 属于动态编译，能够将 Dart 代码编译成生成中间代码，让 Dart VM 在运行时解释执行，因此可以通过动态更新中间代码实现增量同步。\n热重载的流程可以分为 5 步，包括：扫描工程改动、增量编译、推送更新、代码合并、Widget 重建。\nFlutter 在接收到代码变更后，并不会让 App 重新启动执行，而只会触发 Widget 树的重新绘制，因此可以保持改动前的状态，大大缩短了从代码修改到看到修改产生的变化之间所需要的时间。\n另一方面，由于涉及到状态的保存与恢复，涉及状态兼容与状态初始化的场景，热重载是无法支持的，如改动前后 Widget 状态无法兼容、全局变量与静态属性的更改、main 方法里的更改、initState 方法里的更改、枚举和泛型的更改等。\n可以发现，热重载提高了调试 UI 的效率，非常适合写界面样式这样需要反复查看修改效果的场景。但由于其状态保存的机制所限，热重载本身也有一些无法支持的边界。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "Flutter 是如何与原生Android、iOS进行通信的？",
    "answer": "Flutter 通过 PlatformChannel 与原生进行交互，其中 PlatformChannel 分为三种：\n\nBasicMessageChannel：用于传递字符串和半结构化的信息。\nMethodChannel：用于传递方法调用。Flutter主动调用Native的方法，并获取相应的返回值。\nEventChannel：用于数据流（event streams）的通信。\n",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "说下Widgets、RenderObjects 和 Elements的关系",
    "answer": "Widget ：仅用于存储渲染所需要的信息。\nRenderObject ：负责管理布局、绘制等操作。\nElement ：才是这颗巨大的控件树上的实体。\n\nWidget会被inflate（填充）到Element，并由Element管理底层渲染树。Widget并不会直接管理状态及渲染,而是通过State这个对象来管理状态。Flutter创建Element的可见树，相对于Widget来说，是可变的，通常界面开发中，我们不用直接操作Element,而是由框架层实现内部逻辑。就如一个UI视图树中，可能包含有多个TextWidget(Widget被使用多次)，但是放在内部视图树的视角，这些TextWidget都是填充到一个个独立的Element中。Element会持有renderObject和widget的实例。记住，Widget 只是一个配置，RenderObject 负责管理布局、绘制等操作。\n在第一次创建 Widget 的时候，会对应创建一个 Element， 然后将该元素插入树中。如果之后 Widget 发生了变化，则将其与旧的 Widget 进行比较，并且相应地更新 Element。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "StatefulWidget 的生命周期是怎么样的？",
    "answer": "\ninitState()：Widget 初始化当前 State，在当前方法中是不能获取到 Context 的，如想获取，可以试试 Future.delayed()\ndidChangeDependencies()：在 initState() 后调用，State对象依赖关系发生变化的时候也会调用。\ndeactivate()：当 State 被暂时从视图树中移除时会调用这个方法，页面切换时也会调用该方法，和Android里的 onPause 差不多。\ndispose()：Widget 销毁时调用。\ndidUpdateWidget：Widget 状态发生变化的时候调用。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "介绍下StatelessWidget和StatefulWidget两种状态组件类",
    "answer": "StatelessWidget: 一旦创建就不关心任何变化，在下次构建之前都不会改变。它们除了依赖于自身的配置信息（在父节点构建时提供）外不再依赖于任何其他信息。比如典型的Text、Row、Column、Container等，都是StatelessWidget。它的生命周期相当简单：初始化、通过build()渲染。\nStatefulWidget: 在生命周期内，该类Widget所持有的数据可能会发生变化，这样的数据被称为State，这些拥有动态内部数据的Widget被称为StatefulWidget。比如复选框、Button等。State会与Context相关联，并且此关联是永久性的，State对象将永远不会改变其Context，即使可以在树结构周围移动，也仍将与该context相关联。当state与context关联时，state被视为已挂载。StatefulWidget由两部分组成，在初始化时必须要在createState()时初始化一个与之相关的State对象。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "Flutter的FrameWork层和Engine层：",
    "answer": "ameWork层\n\nFlutter的顶层是用drat编写的框架（SDK），它实现了一套基础库，包含Material（Android风格UI）和Cupertino（iOS风格）的UI界面，下面是通用的Widgets（组件），之后是一些动画、绘制、渲染、手势库等。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。\n\nEngine层\nSkia是Google的一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。\n第二是Dart 运行时环境\n第三文本渲染布局引擎。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "为什么说Flutter性能好？说下和其他跨平台的本质区别！",
    "answer": "与用于构建移动应用程序的其他大多数框架不同，Flutter是重写了一整套包括底层渲染逻辑和上层开发语言的完整解决方案。这样不仅可以保证视图渲染在Android和iOS上的高度一致性，在代码执行效率和渲染性能上也可以媲美原生App的体验。这，就是Flutter和其他跨平台方案的本质区别。\n\n",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "介绍下Widget、State、Context 概念",
    "answer": "Widget：在Flutter中，几乎所有东西都是Widget。将一个Widget想象为一个可视化的组件（或与应用可视化方面交互的组件），当你需要构建与布局直接或间接相关的任何内容时，你正在使用Widget。\nWidget树：Widget以树结构进行组织。包含其他Widget的widget被称为父Widget(或widget容器)。包含在父widget中的widget被称为子Widget。\nContext：仅仅是已创建的所有Widget树结构中的某个Widget的位置引用。简而言之，将context作为widget树的一部分，其中context所对应的widget被添加到此树中。一个context只从属于一个widget，它和widget一样是链接在一起的，并且会形成一个context树。\nState：定义了StatefulWidget实例的行为，它包含了用于”交互/干预“Widget信息的行为和布局。应用于State的任何更改都会强制重建Widget。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Flutter",
    "name": "介绍下Flutter的FrameWork层和Engine层，以及它们的作用",
    "answer": "Flutter的FrameWork层是用Dart编写的框架（SDK），它实现了一套基础库，包含Material（Android风格UI）和Cupertino（iOS风格）的UI界面，下面是通用的Widgets（组件），之后是一些动画、绘制、渲染、手势库等。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。\nFlutter的Engine层是Skia 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "Stream 与 Future是什么关系？",
    "answer": "Stream 和 Future 是 Dart 异步处理的核心 API。Future 表示稍后获得的一个数据，所有异步的操作的返回值都用 Future 来表示。但是 Future 只能表示一次异步获得的数据。而 Stream 表示多次异步获得的数据。比如界面上的按钮可能会被用户点击多次，所以按钮上的点击事件（onClick）就是一个 Stream 。简单地说，Future将返回一个值，而Stream将返回多次值。Dart 中统一使用 Stream 处理异步事件流。Stream 和一般的集合类似，都是一组数据，只不过一个是异步推送，一个是同步拉取。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "Future和Isolate有什么区别？",
    "answer": "future是异步编程，调用本身立即返回，并在稍后的某个时候执行完成时再获得返回结果。在普通代码中可以使用await 等待一个异步调用结束。\nisolate是并发编程，Dart有并发时的共享状态，所有Dart代码都在isolate中运行，包括最初的main()。每个isolate都有它自己的堆内存，意味着其中所有内存数据，包括全局数据，都仅对该isolate可见，它们之间的通信只能通过传递消息的机制完成，消息则通过端口(port)收发。isolate只是一个概念，具体取决于如何实现，比如在Dart VM中一个isolate可能会是一个线程，在Web中可能会是一个Web Worker。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "main future mirotask 的执行顺序是怎样的?",
    "answer": "普通代码都是同步执行的，结束后会开始检查microtask中是否有任务，若有则执行，执行完继续检查microtask，直到microtask列队为空。最后会去执行event队列（future）。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "Dart的内存分配与垃圾回收是怎么样的？",
    "answer": "Dart VM 的内存分配策略比较简单，创建对象时只需要在堆上移动指针，内存增长始终是线性的，省去了查找可用内存的过程。在 Dart 中，并发是通过 Isolate 实现的。Isolate 是类似于线程但不共享内存，独立运行的 worker。这样的机制，就可以让 Dart 实现无锁的快速分配。Dart 的垃圾回收，则是采用了多生代算法。新生代在回收内存时采用“半空间”机制，触发垃圾回收时，Dart 会将当前半空间中的“活跃”对象拷贝到备用空间，然后整体释放当前空间的所有内存。回收过程中，Dart 只需要操作少量的“活跃”对象，没有引用的大量“死亡”对象则被忽略，这样的回收机制很适合 Flutter 框架中大量 Widget 销毁重建的场景。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "JIT 与 AOT分别是什么？",
    "answer": " JIT（Just In Time，即时编译）和 AOT（Ahead of Time，运行前编译）,JIT 和 AOT 则是最常见的两种编译模式。JIT 在运行时即时编译，在开发周期中使用，可以动态下发和执行代码，开发测试效率高，但运行速度和执行性能则会因为运行时即时编译受到影响。AOT 即提前编译，可以生成被直接执行的二进制代码，运行速度快、执行性能表现好，但每次执行前都需要提前编译，开发测试效率低。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "dart中mixin机制是怎么样的？",
    "answer": "Dart为了支持多重继承，引入了mixin关键字，它最大的特殊处在于：mixin定义的类不能有构造方法，这样可以避免继承多个类而产生的父类构造方法冲突。\nmixins的对象是类，mixins绝不是继承，也不是接口，而是一种全新的特性，",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "Stream 有哪两种订阅模式？分别是怎么调用的？",
    "answer": "单订阅(single)和多订阅（broadcast）。\n单订阅就是只能有一个订阅者，而广播是可以有多个订阅者。这就有点类似于消息服务（Message Service）的处理模式。单订阅类似于点对点，在订阅者出现之前会持有数据，在订阅者出现之后就才转交给它。而广播类似于发布订阅模式，可以同时有多个订阅者，当有数据时就会传递给所有的订阅者，而不管当前是否已有订阅者存在。\nStream 默认处于单订阅模式，所以同一个 stream 上的 listen 和其它大多数方法只能调用一次，调用第二次就会报错。但 Stream 可以通过 transform() 方法（返回另一个 Stream）进行连续调用。通过 Stream.asBroadcastStream() 可以将一个单订阅模式的 Stream 转换成一个多订阅模式的 Stream，isBroadcast 属性可以判断当前 Stream 所处的模式。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "isolate ",
    "answer": "在Dart中，一个Isolate对象其实就是一个isolate执行环境的引用，一般来说我们都是通过当前的isolate去控制其他的isolate完成彼此之间的交互，而当我们想要创建一个新的Isolate可以使用Isolate.spawn方法获取返回的一个新的isolate对象，两个isolate之间使用SendPort相互发送消息，而isolate中也存在了一个与之对应的ReceivePort接受消息用来处理，但是我们需要注意的是，ReceivePort和SendPort在每个isolate都有一对，只有同一个isolate中的ReceivePort才能接受到当前类的SendPort发送的消息并且处理。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "Dart 是如何实现多任务并行的",
    "answer": "Dart 是单线程的，不存在多线程。Flutter的多线程主要依赖Dart的并发编程、异步和事件驱动机制。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "Dart 语言有哪些重要的概念",
    "answer": "在Dart中，一切都是对象，所有的对象都是继承自Object\nDart是强类型语言，但可以用var或 dynamic来声明一个变量，Dart会自动推断其数据类型,dynamic类似\n没有赋初值的变量都会有默认值null\n\nDart没有public protected\nprivate等关键字，如果某个变量以下划线（_）开头，代表这个变量在库中是私有的",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "Dart 语言有哪些重要的特性",
    "answer": "执行速度快，Dart提供提前优化编译，以在移动设备和Web上获得可预测的高性能和快速启动。\n易于移植，Dart可编译成ARM和X86代码，这样Dart移动应用程序可以在iOS、Android和其他地方运行\n响应式编程,容易上手",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "dart是值传递还是引用传递？",
    "answer": "dart是值传递。我们每次调用函数，传递过去的都是对象的内存地址，而不是这个对象的复制。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "事件循环是什么",
    "answer": "将需要处理的一系列事件，放在一个事件队列（Event Queue）中，不断从事件队列中取出事件，并执行需要执行的代码块，直到事件被清空。Dart 在单线程中是以消息循环机制来运行的，包含两个任务队列，一个是“微任务队列” microtask queue，另一个叫做“事件队列” event queue。\n当Flutter应用启动后，消息循环机制便启动了。首先会按照先进先出的顺序逐个执行微任务队列中的任务，当所有微任务队列执行完后便开始执行事件队列中的任务，事件任务执行完毕后再去执行微任务，如此循环往复，生生不息。",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "阻塞式调用和非阻塞式调用是怎么样的",
    "answer": "阻塞：调用结果之前，当前线程会被挂起，调用线程只有在得到结果之后才会继续执行；\n非阻塞：调用执行之后，当前线程不会停止运行，只需要过一段时间来检查有没有结果返回即可；",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "dart是多线程还是单线程执行？",
    "answer": "单线程执行，多线程是使用异步来执行的",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "Assert(断言)有什么作用？",
    "answer": "在debug的时候提示出断言错误让开发者知悉，只在debug有效；",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "描述下getter setter和重写",
    "answer": "Dart 中所有的基础类型、类等都继承 Object ，默认值是 NULL， 自带 getter 和 setter ，而如果是 final 或者 const 的话，那么它只有一个 getter 方法，Object 都支持 getter、setter 重写",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "const修饰构造函数和放声明数值前分别有什么作用",
    "answer": "构造函数前：构造函数会在编译期和常量一起被编译；\n声明数值前：一个不可变的常量，编译期就被初始化；",
    "difficulty": 1,
    "important": 2
  },
  {
    "type": "Dart",
    "name": "类构造方法后面加个super表示什么意思",
    "answer": "调用父类的属性，可进行赋值传输",
    "difficulty": 1,
    "important": 2
  }
]